!function(c){var t={};function g(n){if(t[n])return t[n].exports;var I=t[n]={i:n,l:!1,exports:{}};return c[n].call(I.exports,I,I.exports,g),I.l=!0,I.exports}g.m=c,g.c=t,g.d=function(c,t,n){g.o(c,t)||Object.defineProperty(c,t,{enumerable:!0,get:n})},g.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},g.t=function(c,t){if(1&t&&(c=g(c)),8&t)return c;if(4&t&&"object"==typeof c&&c&&c.__esModule)return c;var n=Object.create(null);if(g.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:c}),2&t&&"string"!=typeof c)for(var I in c)g.d(n,I,function(t){return c[t]}.bind(null,I));return n},g.n=function(c){var t=c&&c.__esModule?function(){return c.default}:function(){return c};return g.d(t,"a",t),t},g.o=function(c,t){return Object.prototype.hasOwnProperty.call(c,t)},g.p="",g(g.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/weatherInformationClass.js\nclass WeatherInformation {\r\n  constructor(weatherInfo) {\r\n    (this.location = weatherInfo.name),\r\n      (this.country = weatherInfo.sys.country);\r\n    (this.date = new Date()),\r\n      (this.temp = weatherInfo.main.temp),\r\n      (this.iconName = weatherInfo.weather[0].main),\r\n      (this.pressure = weatherInfo.main.pressure),\r\n      (this.humidity = weatherInfo.main.humidity),\r\n      (this.windSpped = weatherInfo.wind.speed);\r\n  }\r\n\r\n  setLocation() {\r\n    const locationID = document.getElementsByClassName(\r\n      "headText__location--js"\r\n    )[0];\r\n    locationID.innerHTML = `in ${this.location}, ${this.country}`;\r\n  }\r\n  setDate() {\r\n    const dateID = document.getElementsByClassName("headText__date--js")[0];\r\n    dateID.innerHTML = `Today ${this.date.getDate()}th, ${this.date.toLocaleString(\r\n      "en-EN",\r\n      { month: "long" }\r\n    )}`;\r\n  }\r\n\r\n  setTemp() {\r\n    const tempID = document.getElementsByClassName("headText--degrees-js")[0];\r\n    tempID.innerHTML = `${this.temp.toFixed(1)} Â°C`;\r\n  }\r\n\r\n  setPressure() {\r\n    const pressureID = document.getElementsByClassName(\r\n      "weatherToday__pressure--js"\r\n    )[0];\r\n    pressureID.innerHTML = `${this.pressure} hPa`;\r\n  }\r\n\r\n  setHumidity() {\r\n    const humidityID = document.getElementsByClassName(\r\n      "weatherToday__humidity--js"\r\n    )[0];\r\n    humidityID.innerHTML = `${this.humidity} %`;\r\n  }\r\n\r\n  setWindSpeed() {\r\n    const windSpeedID = document.getElementsByClassName(\r\n      "weatherToday__windSpeed--js"\r\n    )[0];\r\n    windSpeedID.innerHTML = `${this.windSpped} m/s`;\r\n  }\r\n\r\n  setWeatherInformation() {\r\n    this.setLocation();\r\n    this.setDate();\r\n    this.setTemp();\r\n    this.setPressure();\r\n    this.setHumidity();\r\n    this.setWindSpeed();\r\n  }\r\n\r\n  weatherIcon(weather) {\r\n    let currentDate = new Date();\r\n    currentDate = currentDate.getHours();\r\n    switch (weather) {\r\n      case "thunderstorm":\r\n        return "storm.svg";\r\n        break;\r\n      case "Drizzle":\r\n        return "Drizzle.svg";\r\n        break;\r\n      case "Rain":\r\n        return "Rain.svg";\r\n        break;\r\n      case "Snow":\r\n        return "Snowflake.svg";\r\n        break;\r\n      case "Atmosphere":\r\n        return "fog.svg";\r\n        break;\r\n      case "Clear":\r\n        if (currentDate <= 20) {\r\n          return "sun.svg";\r\n          break;\r\n        } else {\r\n          return "moon.svg";\r\n          break;\r\n        }\r\n      case "Clouds":\r\n        return "Clouds.svg";\r\n        break;\r\n    }\r\n  }\r\n\r\n  setImage() {\r\n    const imageID = document.getElementsByClassName("weatherImage--js")[0];\r\n    const weatherName = this.weatherIcon(this.iconName);\r\n    imageID.src = `assets/img/${weatherName}`;\r\n  }\r\n  roundTemp(temp) {\r\n    return Math.round((temp * 100) / 100);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/js/chartClass.js\nclass Chart {\r\n    constructor(weatherData, axisXposition) {\r\n      this.axisXposition = axisXposition;\r\n      this.weatherByHour = weatherData;\r\n      this.condition = false;\r\n      this.state = {};\r\n      this.tooltip = document.getElementsByClassName("chartTemp__tooltip")[0];\r\n      this.canvas = document.getElementById("chartTemp__canvas");\r\n      this.ctx = this.canvas.getContext("2d");\r\n      this.button = document.getElementsByClassName("header__search--buttonJS")[0];\r\n    }\r\n  \r\n    canvasDimensions() {\r\n      this.canvas.width = 660;\r\n      this.canvas.height = 309;\r\n    }\r\n  \r\n    blocks(count) {\r\n      return count * 40;\r\n    }\r\n    \r\n    setAxisXposition(averageTemp) {\r\n      if (averageTemp > -10 && averageTemp < 15) {\r\n        this.axisXposition = this.axisXposition / 2 + 20;\r\n      }\r\n      else if (averageTemp < -10) {\r\n        this.axisXposition = 40;\r\n      }\r\n    }\r\n\r\n    drawGrid() {\r\n      let gridX = 40;\r\n      let gridY = 40;\r\n      const cellSize = 40;\r\n      this.ctx.beginPath();\r\n      this.ctx.strokeStyle = "lightgrey";\r\n    \r\n      while (gridX <= this.canvas.width - 20) {\r\n        this.ctx.moveTo(gridX, 20);\r\n        this.ctx.lineTo(gridX, this.canvas.height - 20);\r\n        gridX += cellSize;\r\n      }\r\n      while (gridY <= this.canvas.height - 20) {\r\n        this.ctx.moveTo(20, gridY);\r\n        this.ctx.lineTo(this.canvas.width - 10, gridY);\r\n        gridY += cellSize;\r\n      }\r\n      this.ctx.stroke();\r\n    }\r\n    \r\n    async drawAxis(hours) {\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = "black";\r\n        this.ctx.moveTo(this.blocks(1), this.blocks(1 / 2));\r\n        this.ctx.lineTo(this.blocks(1), this.blocks(7));\r\n        this.ctx.moveTo(this.blocks(1), this.axisXposition);\r\n        this.ctx.lineTo(this.blocks(16), this.axisXposition);\r\n        \r\n        this.ctx.moveTo(this.blocks(1), this.blocks(7));\r\n        let text = this.axisXposition === 160 ? -15 : (this.axisXposition === 40 ? -30 : 0);\r\n        let textY = this.blocks(7);\r\n        for (let i = 1; i <= 7; i++) {\r\n          this.ctx.strokeText(text, this.blocks(1 / 2), textY);\r\n          textY -= 40;\r\n          text += 5;\r\n        }\r\n        this.ctx.moveTo(this.blocks(2), this.blocks(7));\r\n        let textX = this.blocks(1.9);\r\n              for (let i = 0; i <= 15; i++) {\r\n          this.ctx.strokeText(hours[i], textX, this.blocks(7.5));\r\n          textX += 40;\r\n        }\r\n        this.ctx.stroke();\r\n      \r\n      \r\n      \r\n    \r\n\r\n    }\r\n    timestampToTime(stamp) {\r\n      let date = new Date(stamp * 1000);\r\n      return date.getHours();\r\n    }\r\n    \r\n    mapAndFilter(tempArray) {\r\n      tempArray = tempArray.map((el) => this.timestampToTime(el));\r\n      tempArray = tempArray.filter((el) => el % 2 == 0);\r\n      return tempArray;\r\n    }\r\n    \r\n    temperatureToChartCoords(temp){\r\n      let temperature = temp.map((el) => el / 5);\r\n      temperature = temperature.slice(0,15);\r\n      return temperature;\r\n    }\r\n    \r\n    getHoursCoords() {\r\n      let hourOfTemp = [...Array(17).keys()]\r\n      hourOfTemp = hourOfTemp.slice(2, 17);\r\n    \r\n      return hourOfTemp;\r\n    }\r\n    \r\n    getAverageTemp(temperature) {\r\n      return (temperature.reduce((a,b) => (a+b)) / temperature.length).toFixed(1);\r\n    }\r\n\r\n    drawChart(temperature) {\r\n      const tempHours = this.getHoursCoords();\r\n      let i = 1;\r\n      const context = this.ctx\r\n      const block = this.blocks.bind(this);\r\n      const axisXposition = this.axisXposition;\r\n      function animation() {\r\n        if (i <= temperature.length) {\r\n          window.requestAnimationFrame(animation);\r\n        }\r\n        context.strokeStyle = "#FFE74A";\r\n        context.lineWidth = 3;\r\n        context.beginPath();\r\n        context.moveTo(block(tempHours[i-1]), axisXposition - block(temperature[i-1]));\r\n        context.arc(block(tempHours[i-1]), axisXposition - block(temperature[i-1]), 3, 0, Math.PI * 2, true);\r\n        context.lineTo(block(tempHours[i]), axisXposition - block(temperature[i]));\r\n        context.stroke();\r\n        i++;\r\n      }\r\n      animation();\r\n    }\r\n    \r\n    async waitForGrid(ms) {\r\n      return new Promise(r => setTimeout(r, ms));\r\n    }\r\n    \r\n    getMousePosition(evt, canvas) {\r\n      let rect = canvas.getBoundingClientRect();\r\n      return {\r\n        x: evt.clientX - rect.left,\r\n        y: evt.clientY - rect.top\r\n      };\r\n    }\r\n    \r\n    filterTemperature(temperature) {\r\n      const temp = temperature\r\n        .map((obj) => obj.temp)\r\n        .filter((el, index) => index % 2 == 0);\r\n    \r\n      return temp;\r\n    }\r\n    \r\n    temperatureToPixel(temp){\r\n      const pixelTemp = temp.map(el => this.axisXposition - this.blocks(el));\r\n      \r\n      return pixelTemp;\r\n    }\r\n    \r\n    hoursToPixel(hours) {\r\n      const hourrs = hours.map(el => this.blocks(el));\r\n      return hourrs;\r\n    }\r\n    \r\n    createTempObj(hour, temp, hourOfTemp, tempInHour){\r\n      const tempPointCoords = [];\r\n      for (let i = 0; i < temp.length; i++){\r\n        tempPointCoords.push({\r\n          x: hour[i],\r\n          y: temp[i],\r\n          xmin: Math.abs(hour[i]) - 3,\r\n          xmax: Math.abs(hour[i]) + 3,\r\n          ymin: Math.abs(temp[i]) - 3,\r\n          ymax: Math.abs(temp[i]) + 3,\r\n          hourTemp: {\r\n            hour: hourOfTemp[i],\r\n            temp: tempInHour[i]\r\n          },\r\n    \r\n        })\r\n      }\r\n      return tempPointCoords;\r\n    }\r\n    \r\n    drawPoint(ctx, coords = {}, radius, color = \'white\') {\r\n      const mouseCoordinate = coords;\r\n      ctx.strokeStyle = color;\r\n      ctx.beginPath();\r\n      ctx.moveTo(mouseCoordinate.x, mouseCoordinate.y);\r\n      ctx.arc(mouseCoordinate.x, mouseCoordinate.y, radius, 0, Math.PI * 2, true);\r\n      ctx.fillStyle = color;\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n    \r\n    addEvent(pointTemp, mouseCoordinate, drawPoint, canvas, state, tooltip, ctx, condition) {\r\n      return function(e) {\r\n          const mouseCoords = mouseCoordinate(e, canvas);\r\n          let boools = pointTemp.filter(el => {\r\n          const a = el.xmin <= mouseCoords.x;\r\n          const b = mouseCoords.x <= el.xmax;\r\n          const c = el.ymin <= mouseCoords.y;\r\n          const d = mouseCoords.y <= el.ymax;\r\n          return (a && b && c && d)\r\n        })\r\n\r\n        if(boools.length) {\r\n          drawPoint(ctx, boools[0], 1);\r\n          state = {...boools[0]};\r\n          condition = true;\r\n          if (canvas.width - (state.x + 5) <= 80){\r\n            tooltip.style.left = `${state.x - 85}px`\r\n            tooltip.style.top = `${state.y - 35}px`;\r\n            \r\n          }\r\n          else {\r\n            tooltip.style.left = `${state.x + 5}px`;\r\n            tooltip.style.top = `${state.y - 35}px`;\r\n          }\r\n          tooltip.style.display = \'flex\';\r\n          tooltip.innerHTML = `Time: ${state.hourTemp.hour}:00, Temp: ${state.hourTemp.temp}Â°C`;\r\n        } \r\n        else if(!boools.length) {\r\n          drawPoint(ctx, state, 3, "#FFE74A");\r\n          condition = false;\r\n          state = {};\r\n          tooltip.style.display = \'none\';\r\n          boools = [];\r\n        } \r\n      \r\n      }\r\n    }\r\n    addPopUp(tempPoint) {\r\n      const addEvent1 = this.addEvent(tempPoint, this.getMousePosition, this.drawPoint, this.canvas, this.state, this.tooltip, this.ctx, this.condition);\r\n      this.canvas.addEventListener(\'mousemove\', addEvent1);\r\n      this.button.addEventListener("click", e => {\r\n        this.canvas.removeEventListener(\'mousemove\', addEvent1);\r\n      });\r\n      \r\n      \r\n    }\r\n\r\n    removePopUp(tempPoint) {\r\n      const addEvent1 = this.addEvent(tempPoint, this.getMousePosition, this.drawPoint, this.canvas, this.state, this.tooltip, this.ctx, this.condition);\r\n      this.canvas.removeEventListener(\'mousemove\', addEvent1);\r\n    }\r\n\r\n    async chart() {\r\n      const hourOfWeather = this.mapAndFilter(this.weatherByHour.map((obj) => obj.dt));\r\n      let temperature = this.filterTemperature(this.weatherByHour);\r\n      const averageTemp = this.getAverageTemp(temperature);\r\n      this.setAxisXposition(averageTemp);\r\n      \r\n      const temperatureCoords = this.temperatureToChartCoords(temperature);\r\n      \r\n      const tempPixels = this.temperatureToPixel(temperatureCoords);\r\n      const hoursPixels = this.hoursToPixel(this.getHoursCoords());\r\n      \r\n      const tempPoints = this.createTempObj(hoursPixels, tempPixels, hourOfWeather, temperature);\r\n    \r\n      this.canvasDimensions();\r\n      this.drawGrid();\r\n      this.drawAxis(hourOfWeather, averageTemp);\r\n      await this.waitForGrid(500);\r\n      this.drawChart(temperatureCoords)\r\n      this.addPopUp(tempPoints);\r\n      this.removePopUp(tempPoints);\r\n    }\r\n  \r\n  }\n// CONCATENATED MODULE: ./src/js/weekForecastClass.js\nclass WeekForecast {\r\n  constructor(weekForecastData) {\r\n    this.weekData = weekForecastData;\r\n    this.weatherForecastContainer = document.getElementsByClassName(\r\n      "weatherForecast--js"\r\n    );\r\n    this.weatherForecastContainer = this.weatherForecastContainer[0];\r\n  }\r\n\r\n  sliceWeekDataArray() {\r\n    this.weekData = this.weekData.slice(1, 8);\r\n  }\r\n\r\n  getTimestampToTime(timestamp) {\r\n    const time = new Date(timestamp * 1000);\r\n    return time.getDay();\r\n  }\r\n\r\n  getNameOfWeek(number) {\r\n    switch (number) {\r\n      case 0:\r\n        return "Sun";\r\n        break;\r\n      case 1:\r\n        return "Mon";\r\n        break;\r\n      case 2:\r\n        return "Tue";\r\n        break;\r\n      case 3:\r\n        return "Wed";\r\n        break;\r\n      case 4:\r\n        return "Thur";\r\n        break;\r\n      case 5:\r\n        return "Fri";\r\n        break;\r\n      case 6:\r\n        return "Sat";\r\n        break;\r\n    }\r\n  }\r\n  getWeatherParameters() {\r\n    this.weekData = this.weekData.map((el) => {\r\n      return {\r\n        day: this.getNameOfWeek(this.getTimestampToTime(el.dt)),\r\n        temp: el.temp.day,\r\n        weather: el.weather[0].main,\r\n      };\r\n    });\r\n  }\r\n\r\n  putWeatherIntoSection() {\r\n    this.weatherForecastContainer.innerHTML = "";\r\n    this.weekData.forEach((el) => {\r\n      this.weatherForecastContainer.innerHTML += `<div class="weatherForecast__day weatherForecast__day--js"><img class="weatherForecast__dayElement" src=\'assets/img/weatherIcons/${this.weatherIcon(\r\n        el.weather\r\n      )}\' alt=\'\'></img><div class="weatherForecast__dayElement"><p>${\r\n        el.day\r\n      }<br>${el.temp}</p></div></div>`;\r\n    });\r\n  }\r\n\r\n  addWeatherForecast() {\r\n    this.sliceWeekDataArray();\r\n    this.getWeatherParameters();\r\n    this.putWeatherIntoSection();\r\n  }\r\n\r\n  weatherIcon(weather) {\r\n    let currentDate = new Date();\r\n    currentDate = currentDate.getHours();\r\n    switch (weather) {\r\n      case "thunderstorm":\r\n        return "Storm.svg";\r\n        break;\r\n      case "Drizzle":\r\n        return "Drizzle.svg";\r\n        break;\r\n      case "Rain":\r\n        return "Rain.svg";\r\n        break;\r\n      case "Snow":\r\n        return "Snowflake.svg";\r\n        break;\r\n      case "Atmosphere":\r\n        return "Fog.svg";\r\n        break;\r\n      case "Clear":\r\n        if (currentDate <= 20) {\r\n          return "Sun.svg";\r\n          break;\r\n        } else {\r\n          return "Moon.svg";\r\n          break;\r\n        }\r\n      case "Clouds":\r\n        return "Clouds.svg";\r\n        break;\r\n    }\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/js/main.js\n\r\n\r\n\r\n\r\n// service worker registration - remove if you\'re not going to use it\r\n\r\nif ("serviceWorker" in navigator) {\r\n  window.addEventListener("load", function () {\r\n    navigator.serviceWorker.register("serviceworker.js").then(\r\n      function (registration) {\r\n        // Registration was successful\r\n        console.log(\r\n          "ServiceWorker registration successful with scope: ",\r\n          registration.scope\r\n        );\r\n      },\r\n      function (err) {\r\n        // registration failed :(\r\n        console.log("ServiceWorker registration failed: ", err);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n// place your code below\r\nconst apiKey = "53c5e97675c8d3d8da07e56aec5a3a22";\r\nconst axisXposition = 280; // X axis is on 280px Canvas Height;\r\nlet classStatus = false;\r\n\r\n(function () {\r\n  let lastTime = 0;\r\n  let vendors = ["ms", "moz", "webkit", "o"];\r\n  for (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];\r\n    window.cancelAnimationFrame =\r\n      window[vendors[x] + "CancelAnimationFrame"] ||\r\n      window[vendors[x] + "CancelRequestAnimationFrame"];\r\n  }\r\n\r\n  if (!window.requestAnimationFrame)\r\n    window.requestAnimationFrame = function (callback, element) {\r\n      let currTime = new Date().getTime();\r\n      let timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n      let id = window.setTimeout(function () {\r\n        callback(currTime + timeToCall);\r\n      }, timeToCall);\r\n      lastTime = currTime + timeToCall;\r\n      return id;\r\n    };\r\n\r\n  if (!window.cancelAnimationFrame)\r\n    window.cancelAnimationFrame = function (id) {\r\n      clearTimeout(id);\r\n    };\r\n})();\r\n\r\nfunction error(err) {\r\n  console.warn(`ERROR(${err.code}): ${err.message}`);\r\n}\r\n\r\nconst options = {\r\n  enableHighAccuracy: true,\r\n  timeout: 5000,\r\n  maximumAge: 0,\r\n};\r\n\r\nfunction main_location() {\r\n  return new Promise((resolve, reject) =>\r\n    navigator.geolocation.getCurrentPosition(resolve, error)\r\n  );\r\n}\r\n\r\nasync function getLocation(location) {\r\n  let position = location;\r\n  let weatherByPosition;\r\n  let weatherByHour;\r\n  let nextSevenDays;\r\n  if (typeof position === "object") {\r\n    position = await position.coords;\r\n    const { latitude, longitude } = position;\r\n\r\n    weatherByPosition = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric&lang=pl`\r\n    );\r\n    weatherByPosition = await weatherByPosition.json();\r\n\r\n    weatherByHour = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&\r\n    exclude=hourly&appid=${apiKey}&units=metric`);\r\n    weatherByHour = await weatherByHour.json();\r\n    weatherByHour = weatherByHour.hourly;\r\n\r\n    nextSevenDays = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&\r\n    exclude=daily&appid=${apiKey}&units=metric`);\r\n    nextSevenDays = await nextSevenDays.json();\r\n    nextSevenDays = nextSevenDays.daily;\r\n  } else {\r\n    weatherByPosition = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${position}&appid=${apiKey}&units=metric`\r\n    );\r\n    weatherByPosition = await weatherByPosition.json();\r\n\r\n    const coords = weatherByPosition.coord;\r\n    \r\n    weatherByHour = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&\r\n    exclude=hourly&appid=${apiKey}&units=metric`);\r\n    weatherByHour = await weatherByHour.json();\r\n\r\n    weatherByHour = weatherByHour.hourly;\r\n\r\n    nextSevenDays = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&\r\n    exclude=daily&appid=${apiKey}&units=metric`);\r\n    nextSevenDays = await nextSevenDays.json();\r\n    nextSevenDays = nextSevenDays.daily;\r\n  }\r\n\r\n  const weatherData = new WeatherInformation(weatherByPosition);\r\n  weatherData.setWeatherInformation();\r\n  const chart = new Chart(weatherByHour, axisXposition);\r\n  chart.chart();\r\n  const forecastForWeek = new WeekForecast(nextSevenDays);\r\n  forecastForWeek.addWeatherForecast();\r\n  \r\n}\r\n\r\nconst localization = document.getElementsByClassName(\r\n  "header__geolocalization--buttonJS"\r\n)[0];\r\nconst searchButton = document.getElementsByClassName(\r\n  "header__search--buttonJS"\r\n)[0];\r\nconst inputField = document.getElementsByClassName(\r\n  "header__search--inputJS"\r\n)[0];\r\n\r\nlocalization.addEventListener("click", async () => {\r\n  const locations = await main_location();\r\n  await getLocation(locations);\r\n  if (!classStatus) {\r\n    replaceClasses();\r\n    classStatus = true;\r\n  }\r\n});\r\n\r\nsearchButton.addEventListener("click", async () => {\r\n  if (!inputField.value) {\r\n    alert("please type your city name");\r\n  } else if (inputField.value) {\r\n    try {\r\n      await getLocation(inputField.value);\r\n\r\n      if (!classStatus) {\r\n        replaceClasses();\r\n        classStatus = true;\r\n      }\r\n    } catch (error) {\r\n      alert(`Could not find the city \'${inputField.value}`);\r\n    }\r\n  }\r\n});\r\n\r\ninputField.addEventListener("keyup", (event) => {\r\n  if (event.keyCode === 13) {\r\n    searchButton.click();\r\n  }\r\n})\r\n\r\nfunction replaceClasses() {\r\n  const header = document.getElementsByClassName("header--firstLoad")[0];\r\n  const main = document.getElementsByClassName("main__container--firstLoad")[0];\r\n  const footer = document.getElementsByClassName("footer--firstLoad")[0];\r\n\r\n  header.classList.replace("header--firstLoad", "header");\r\n  main.classList.replace("main__container--firstLoad", "main__container");\r\n  footer.classList.replace("footer--firstLoad", "footer__image");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);